import os
import asyncio
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Flask –∏ telegram-application
bot_app = Flask(__name__)
application = Application.builder().token(TOKEN).updater(None).build()

# –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Ä–æ–∫–æ–≤
lessons = [
    {"text": "üëã –£—Ä–æ–∫ 1", "url": "https://youtu.be/vid1"},
    {"text": "üöÄ –£—Ä–æ–∫ 2", "url": "https://youtu.be/vid2"},
    {"text": "üéì –§–∏–Ω–∞–ª", "url": "https://youtu.be/vid3"}
]
user_progress = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_progress[user_id] = 0
    await send_lesson(update.effective_chat.id, user_id, context)

# –ö–Ω–æ–ø–∫–∏
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    index = user_progress.get(user_id, 0)

    if query.data == "next":
        index += 1
    elif query.data == "prev" and index > 0:
        index -= 1
    elif query.data == "skip":
        index += 1
    elif query.data == "finish":
        await query.message.reply_text("‚úÖ –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω!")
        await query.answer()
        return

    user_progress[user_id] = index
    await send_lesson(query.message.chat.id, user_id, context)
    await query.answer()

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ä–æ–∫–∞
async def send_lesson(chat_id, user_id, context, override=None):
    index = override if override is not None else user_progress.get(user_id, 0)
    if index >= len(lessons):
        await context.bot.send_message(chat_id, "üéâ –í—Å–µ —É—Ä–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        return

    lesson = lessons[index]
    text = f"{lesson['text']}\n{lesson['url']}"
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="prev"),
            InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip"),
            InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="next")
        ],
        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫—É—Ä—Å", callback_data="finish")]
    ])
    await context.bot.send_message(chat_id, text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(handle_button))

# –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
@bot_app.route("/")
def index():
    return "ü§ñ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# Webhook endpoint (—Å –æ–±—ë—Ä—Ç–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π)
@bot_app.post(f"/{TOKEN}")
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    asyncio.run(application.process_update(update))
    return "ok"

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    async def main():
        await application.initialize()
        await application.start()

        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook
        webhook_url = f"https://telegram-bot-akmz.onrender.com/{TOKEN}"
        await application.bot.set_webhook(webhook_url)
        print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

        # –ó–∞–ø—É—Å–∫ Flask
        bot_app.run(host="0.0.0.0", port=5000)

    asyncio.run(main())
